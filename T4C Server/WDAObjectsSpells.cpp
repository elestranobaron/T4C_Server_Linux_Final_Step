#include "stdafx.h"
#include "WDAObjectsSpells.h"
#include "Format.h"

using namespace vir;
using namespace std;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

WDAObjectsSpells::WDAObjectsSpells( Logger &cLogger, DEBUG_LEVEL dlHigh ) : WDATable( cLogger )
{
    MapDebugHighLogLevel( dlHigh );
}

WDAObjectsSpells::~WDAObjectsSpells()
{

}

// Accessors
//////////////////////////////////////////////////////////////////////////////////////////
DWORD WDAObjectsSpells::GetSpellID( void )
//////////////////////////////////////////////////////////////////////////////////////////
// Returns the spell ID
//////////////////////////////////////////////////////////////////////////////////////////
{
    return dwSpellID;
}
//////////////////////////////////////////////////////////////////////////////////////////
DWORD WDAObjectsSpells::GetMessageHook( void )
//////////////////////////////////////////////////////////////////////////////////////////
//  Returns the message on which the spell is hooked.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return dwMessageHook;
}
//////////////////////////////////////////////////////////////////////////////////////////
DWORD WDAObjectsSpells::GetLevel( void )
//////////////////////////////////////////////////////////////////////////////////////////
// Returns the level (??)
//////////////////////////////////////////////////////////////////////////////////////////
{
    return dwLevel;
}

// Saving/Loading
//////////////////////////////////////////////////////////////////////////////////////////
void WDAObjectsSpells::SaveTo
//////////////////////////////////////////////////////////////////////////////////////////
// Saves to a wdaFile
// 
(
 WDAFile &wdaFile // The wdaFile
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    TFormat cFormat;
    cOutput.Log(
        dlDebugHigh,
        cFormat(
            "\n Writing spell %u instilled on %u. Level %u.",
            dwSpellID,
            dwMessageHook,
            dwLevel
        )
    );

    wdaFile.Write( dwSpellID );
    wdaFile.Write( dwMessageHook );
    wdaFile.Write( dwLevel );
}
 
//////////////////////////////////////////////////////////////////////////////////////////
void WDAObjectsSpells::CreateFrom
//////////////////////////////////////////////////////////////////////////////////////////
// Creates from a wdaFile.
// 
(
 WDAFile &wdaFile, // The wdaFile
 bool //createReadOnly
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    wdaFile.Read( dwSpellID );
    wdaFile.Read( dwMessageHook );
    wdaFile.Read( dwLevel );

    TFormat cFormat;
    cOutput.Log(
        dlDebugHigh,
        cFormat(
            "\n Writing spell %u instilled on %u. Level %u.",
            dwSpellID,
            dwMessageHook,
            dwLevel
        )
    );
}

#ifndef NO_DAO_SUPPORT
//////////////////////////////////////////////////////////////////////////////////////////
void WDAObjectsSpells::CreateFrom
//////////////////////////////////////////////////////////////////////////////////////////
// Create from DAO support.
// 
(
 CDaoRecordset &cRecord, // The recordset. 
 CDaoDatabase &cDatabase // The database.
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    // This function should never get an empty or out-of-bound record.
    ASSERT( !cRecord.IsEOF() );

    if( cRecord.IsEOF() ){
        return;
    }
    
    COleVariant oleData;

    // Fetch the spell's data.
    cRecord.GetFieldValue( "SpellID", oleData );
    dwSpellID = V_I4( &oleData );

    cRecord.GetFieldValue( "MessageHook", oleData );
    dwMessageHook = V_I4( &oleData );

    cRecord.GetFieldValue( "Level", oleData );
    dwLevel = V_I4( &oleData );

    TFormat cFormat;
    cOutput.Log(
        dlDebugHigh,
        cFormat(
            "\n Spell %u instilled on %u. Level %u.",
            dwSpellID,
            dwMessageHook,
            dwLevel
        )
    );

}
#endif
