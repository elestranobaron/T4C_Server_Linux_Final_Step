#include "stdafx.h"
#include "SysMsgEffect.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

SysMsgEffect::SysMsgEffect()
{
	m_bError = NOT_LOADED;
	m_bResType = 0;
}

SysMsgEffect::~SysMsgEffect()
{

}

REGISTER_SPELL_EFFECT( SYSMSG, SysMsgEffect::NewFunc, SYSMSG_EFFECT, NULL );

//////////////////////////////////////////////////////////////////////////////////////////
BOOL SysMsgEffect::InputParameter
//////////////////////////////////////////////////////////////////////////////////////////
// 
// 
(
 CString csParam,   // Parameter value.
 WORD wParamID      // Parameter ID.
)
// Return: BOOL, TRUE if parameter was accepted.
//////////////////////////////////////////////////////////////////////////////////////////
{


	//////////////////////////////////////////////////////////////////////////////////////////
	// steph ajout de INT
	//////////////////////////////////////////////////////////////////////////////////////////
    const INT ResType = 1;
	const INT Msg = 2;



	BOOL boReturn = TRUE;

	switch(wParamID)
	{
	case ResType:
		if(csParam.CompareNoCase("private") == 0){
			m_bResType = PRIVATE;
		}else if (csParam.CompareNoCase("global")==0){
			m_bResType = GLOBAL;
		}else{
			boReturn = FALSE;
		}
	break;
	case Msg:
		m_csMsg = csParam;
	break;
	}
	
	return boReturn;
}

//////////////////////////////////////////////////////////////////////////////////////////
void SysMsgEffect::HandleError
//////////////////////////////////////////////////////////////////////////////////////////
// Log errors
// 
(
 BYTE bDaResType,
 CString csDaMsg
)
//////////////////////////////////////////////////////////////////////////////////////////
{
	_LOG_DEBUG
		LOG_DEBUG_LVL1,
		"Error while casting SysMsgEffect.\r\nMsg Type: %d, Msg: %s",
		bDaResType,
		csDaMsg
	LOG_
}

//////////////////////////////////////////////////////////////////////////////////////////
void SysMsgEffect::CallEffect
//////////////////////////////////////////////////////////////////////////////////////////
// Take or give an item
// 
(
 SPELL_EFFECT_PROTOTYPE
)
//////////////////////////////////////////////////////////////////////////////////////////
{
	if(m_bError == NOT_LOADED){
		m_bError = LOADED;
	}

	if(m_bError == FAILED){
		HandleError(m_bResType, m_csMsg);
	}

	if(m_bError == LOADED){
		switch(m_bResType)
		{
		case GLOBAL:{
			GLOBAL_SYSTEM_MESSAGE( BoostFormula::TranslateStringFormula(m_csMsg, self, target) );
		}break;
		case PRIVATE:{
			if(target->GetType() == U_PC ) {
				PRIVATE_SYSTEM_MESSAGE( BoostFormula::TranslateStringFormula(m_csMsg, self, target) );
			} else {
				HandleError(m_bResType, m_csMsg);
			}
		}break;
		default:
		break;
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////
SpellEffect *SysMsgEffect::NewFunc
//////////////////////////////////////////////////////////////////////////////////////////
// Create a SpellEffect object.
// 
(
 LPSPELL_STRUCT lpSpell // The spell structure for any spell effect registration.
)
// Return: SpellEffect, the spell effect. 
//////////////////////////////////////////////////////////////////////////////////////////
{
  CREATE_EFFECT_HANDLE( SysMsgEffect, 0 )
}