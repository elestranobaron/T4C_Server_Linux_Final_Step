#include "stdafx.h"
#include "Recall.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

Recall::Recall()
{
}

Recall::~Recall()
{

}

REGISTER_SPELL_EFFECT( RECALL_EFFECT, Recall::NewFunc, RECALL_EFFECT, NULL );

//////////////////////////////////////////////////////////////////////////////////////////
BOOL Recall::InputParameter
//////////////////////////////////////////////////////////////////////////////////////////
// Input parameter
// 
(
 CString csParam,   // Parameter
 WORD wParamID      // Paremeter ID.
)
// Return: BOOL, TRUE if parameter was accepted.
//////////////////////////////////////////////////////////////////////////////////////////
{


	//////////////////////////////////////////////////////////////////////////////////////////
	// steph ajout de INT
	//////////////////////////////////////////////////////////////////////////////////////////
    const INT ParamX = 1;
    const INT ParamY = 2;
    const INT ParamWorld = 3;


    BOOL boReturn = TRUE;

    switch( wParamID ){
    case ParamX:
        boReturn = recallX.SetFormula( csParam );
    break;
    case ParamY:
        boReturn = recallY.SetFormula( csParam );
    break;
    case ParamWorld:
        boReturn = recallW.SetFormula( csParam );
    break;
    default:
        boReturn = FALSE;
    break;
    }

    return boReturn;
}

//////////////////////////////////////////////////////////////////////////////////////////
void Recall::CallEffect
//////////////////////////////////////////////////////////////////////////////////////////
// Does the recall effect
// 
(
 SPELL_EFFECT_PROTOTYPE // The spell data.
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( target != NULL ){
        WorldPos wlPos;

        wlPos.X     = recallX.GetBoost( self, target );
        wlPos.Y     = recallY.GetBoost( self, target );
        wlPos.world = recallW.GetBoost( self, target );

        target->Teleport( wlPos, 0 );
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
SpellEffect *Recall::NewFunc
//////////////////////////////////////////////////////////////////////////////////////////
// Creates an instance of Recall effect.
// 
(
 LPSPELL_STRUCT lpSpell // The spell structure
)
// Return: SpellEffect, a pointer to a Recall spell effect.
//////////////////////////////////////////////////////////////////////////////////////////
{
   CREATE_EFFECT_HANDLE( Recall, 0 );    
}