#include "stdafx.h"
#include "TFC Server.h"
#include "ObjectTimer.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#define LOCK	csThreadLock.Lock();
#define UNLOCK	csThreadLock.Unlock();

TemplateList <Unit>		ObjectTimer::tluObjectTimers;
CLock                   ObjectTimer::csThreadLock;

//////////////////////////////////////////////////////////////////////////////////////////
void ObjectTimer::Create( void )
//////////////////////////////////////////////////////////////////////////////////////////
// Creates the object timers.
// 
//////////////////////////////////////////////////////////////////////////////////////////
{

}

//////////////////////////////////////////////////////////////////////////////////////////
void ObjectTimer::Destroy( void )
//////////////////////////////////////////////////////////////////////////////////////////
// Destroys the object timers.
// 
//////////////////////////////////////////////////////////////////////////////////////////
{

}
//////////////////////////////////////////////////////////////////////////////////////////
void ObjectTimer::AddObject
//////////////////////////////////////////////////////////////////////////////////////////
// Adds an object to the timer objects
// 
(
 Unit *lpuUnit // the Unit to add
)
//////////////////////////////////////////////////////////////////////////////////////////
{
	LOCK
	// If unit is an object..!
	if( lpuUnit->GetType() == U_OBJECT ){

		// If unit isn't already in list.
		if( !ObjectInList( lpuUnit ) ){
			// Add the item.
			tluObjectTimers.AddToTail( lpuUnit );
		}
	}
	UNLOCK
}
//////////////////////////////////////////////////////////////////////////////////////////
void ObjectTimer::RemoveObject
//////////////////////////////////////////////////////////////////////////////////////////
// Removes an object from the object timers.
// 
(
 Unit *lpuUnit // The unit to remove
)
//////////////////////////////////////////////////////////////////////////////////////////
{
	LOCK

	BOOL boFound = FALSE;

	tluObjectTimers.ToHead();
	while( tluObjectTimers.QueryNext() && !boFound ){
		if( tluObjectTimers.Object() == lpuUnit ){
			tluObjectTimers.Remove();
			boFound = TRUE;
		}
	}

	UNLOCK
}
//////////////////////////////////////////////////////////////////////////////////////////
void ObjectTimer::RemoveObject
//////////////////////////////////////////////////////////////////////////////////////////
// Removes an object from the timers.
// 
(
 DWORD dwID // The unit ID to remove.
)
//////////////////////////////////////////////////////////////////////////////////////////
{
	LOCK

	BOOL boFound = FALSE;

	tluObjectTimers.ToHead();
	while( tluObjectTimers.QueryNext() && !boFound ){
		if( tluObjectTimers.Object()->GetID() == dwID ){
			tluObjectTimers.Remove();
			boFound = TRUE;
		}
	}

	UNLOCK
}
//////////////////////////////////////////////////////////////////////////////////////////
void ObjectTimer::VerifyTimers( void )
//////////////////////////////////////////////////////////////////////////////////////////
// Verifies the timers of all the object in the object timer list.
// 
//////////////////////////////////////////////////////////////////////////////////////////
{
	LOCK	
	tluObjectTimers.ToHead();
	while( tluObjectTimers.QueryNext() ){
		//Verify the timers of each objects in the list.
		tluObjectTimers.Object()->VerifyTimers();
	}
	UNLOCK
}


//////////////////////////////////////////////////////////////////////////////////////////
BOOL ObjectTimer::ObjectInList
//////////////////////////////////////////////////////////////////////////////////////////
// Queries the existence of an object in the list.
// 
(
 Unit *lpuUnit // the object to query
)
// Return: BOOL, TRUE if the object exists
//////////////////////////////////////////////////////////////////////////////////////////
{
	LOCK
	BOOL boFound = FALSE;

	tluObjectTimers.ToHead();
	while( tluObjectTimers.QueryNext() && !boFound ){
		if( tluObjectTimers.Object() == lpuUnit ){
			boFound = TRUE;
		}
	}

	UNLOCK

	return boFound;
}

//////////////////////////////////////////////////////////////////////////////////////////
BOOL ObjectTimer::ObjectInList
//////////////////////////////////////////////////////////////////////////////////////////
// Queries the existance of an object in the list.
// 
(
 DWORD dwID // The object's ID to query
)
// Return: BOOL, TRUE if the object exists in the list.
//////////////////////////////////////////////////////////////////////////////////////////
{
	LOCK
	BOOL boFound = FALSE;

	tluObjectTimers.ToHead();
	while( tluObjectTimers.QueryNext() && !boFound ){
		if( tluObjectTimers.Object()->GetID() == dwID ){
			boFound = TRUE;
		}
	}

	UNLOCK

	return boFound;
}